[{"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js":"1","E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx":"2","E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js":"3","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\singleList.jsx":"4","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectors.jsx":"5","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\urlInput.jsx":"6","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectorControls.jsx":"7","E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\initialSiteMap.js":"8","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\dropDownMenu.jsx":"9","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\multipleCheckbox.jsx":"10"},{"size":157,"mtime":1609446492039,"results":"11","hashOfConfig":"12"},{"size":3107,"mtime":1611414911876,"results":"13","hashOfConfig":"12"},{"size":4478,"mtime":1611345460262,"results":"14","hashOfConfig":"12"},{"size":3705,"mtime":1611414135553,"results":"15","hashOfConfig":"12"},{"size":1990,"mtime":1611414911269,"results":"16","hashOfConfig":"12"},{"size":1171,"mtime":1611257793106,"results":"17","hashOfConfig":"12"},{"size":907,"mtime":1611257793103,"results":"18","hashOfConfig":"12"},{"size":246,"mtime":1610803607742,"results":"19","hashOfConfig":"12"},{"size":561,"mtime":1611416526987,"results":"20","hashOfConfig":"12"},{"size":466,"mtime":1611411771757,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1l2oosp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js",[],["44","45"],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js",["46"],"import { nanoid } from \"nanoid\";\r\n\r\nclass SiteMap {\r\n  constructor(id = nanoid(), name = \"\") {\r\n    this.id = id;\r\n    this.url = \"\";\r\n    this.componentClass = \"sitemap\";\r\n    this.name = name;\r\n    this.parentOf = [];\r\n  }\r\n\r\n  updateSitemap(input, property) {\r\n    let updatedSiteMap = this;\r\n    updatedSiteMap[property] = input;\r\n    this.SiteMap = updatedSiteMap;\r\n  }\r\n}\r\n\r\nclass Selector {\r\n  constructor(parentID, id = nanoid()) {\r\n    this.id = id;\r\n    this.value = \"\";\r\n    this.multiple = \"\";\r\n    this.componentClass = \"selector\";\r\n    this.type = \"\";\r\n    this.memberOfSiteMap = \"\";\r\n    this.childOf = [parentID];\r\n    this.parentOf = [];\r\n  }\r\n  updateSelector(input, property) {\r\n    let updatedSelector = this;\r\n    updatedSelector[property] = input;\r\n    this.Selector = updatedSelector;\r\n  }\r\n}\r\n\r\n//------------------------\r\n//------------------------\r\n\r\nfunction AddSelector(state, parentID, index, childID = nanoid()) {\r\n  if (state.find(item => item.id === childID)) {\r\n    return console.log(\"Error: a child with this id already exists!\");\r\n  }\r\n  let parent = state.filter(x => x.id === parentID)[0];\r\n  if (!parent) {\r\n    return console.log(\"Error: Parent does not exist!\");\r\n  }\r\n\r\n  let newSelector = new Selector(parentID, childID);\r\n  //if subIndex was undefined, assume that selector will be pushed to the\r\n  //childOf list of the parent element.\r\n  if (index === undefined) {\r\n    index = parent.parentOf.length ? parent.parentOf.length - 1 : 0;\r\n  }\r\n  //Set position of child in parentOf.\r\n  if (index === parent.parentOf.length - 1 || parent.parentOf.length === 0) {\r\n    parent.parentOf.push(childID);\r\n  } else {\r\n    let newOrdering = [\r\n      ...parent.parentOf.slice(0, index + 1),\r\n      childID,\r\n      ...parent.parentOf.slice(index + 1),\r\n    ];\r\n    parent.parentOf = newOrdering;\r\n  }\r\n\r\n  //Determine the siteMap id of which the selector is a member by tracing the parents\r\n  //until an item with the componentClass === \"sitemap\" is found. This method presumers\r\n  //that only one parent of a child can exist, even though the array type of the cildOf\r\n  //property indicates the possibility of future implementation of shared parents.\r\n  const findSiteMap = parent => {\r\n    parent.componentClass === \"sitemap\"\r\n      ? (newSelector.memberOfSiteMap = parent.id)\r\n      : findSiteMap(state.filter(item => item.id === parent.childOf[0])[0]);\r\n  };\r\n  findSiteMap(parent);\r\n\r\n  //Now, push the new selector to the state.\r\n  state.push(newSelector);\r\n  //If new selector is added, also update the parent.\r\n  state.map(item => {\r\n    if (item.id === parentID) {\r\n      return (item = parent);\r\n    }\r\n  });\r\n}\r\n\r\n//Delete a selector, remove reference in parent, and remove  its descend\r\nfunction DeleteItem(state, id) {\r\n  let newState = [];\r\n  let count = 1;\r\n  //------------------------\r\n  //Recursively remove children of a deleted selector.\r\n  const RecursiveDelete = (arr, id) => {\r\n    const target = arr.filter(item => item.id === id);\r\n\r\n    //Filter out the selector\r\n    newState = arr.filter(item => item.id !== id);\r\n\r\n    //Find parent and remove reference on first iteration (in subsequent\r\n    //iterations the parent is already removed at this point).\r\n    if (count === 1) {\r\n      let parent = arr.filter(item => item.parentOf.includes(id));\r\n      if (parent.length) {\r\n        parent = parent[0];\r\n        let parentIndex = arr.findIndex(item => item.parentOf.includes(id));\r\n        parent = parent.parentOf.filter(item => item !== id);\r\n        newState[parentIndex].parentOf = parent;\r\n      }\r\n    }\r\n    count++;\r\n\r\n    //Extract child id's and run the Remove script for each of them.\r\n    const children = target.map(item => item.parentOf).flat();\r\n    if (children.length) {\r\n      children.forEach(element => RecursiveDelete(newState, element));\r\n    }\r\n    return newState;\r\n  };\r\n  //------------------------\r\n  return (state = RecursiveDelete(state, id));\r\n}\r\n\r\nfunction ClearSiteMap(arr, siteMapID) {\r\n  //Filter out all the selectors, whose memberOfSiteMap property equals siteMapID.\r\n  //Additionally, remove child entries in the siteMap node. This  function needs to be // invoked as an assignment operation (arr = ClearSiteMap(array, siteMapID)) .\r\n  let newArray = arr.filter(item => item.memberOfSiteMap !== siteMapID);\r\n  newArray[newArray.findIndex(item => item.id === siteMapID)].parentOf = [];\r\n  return newArray;\r\n}\r\n\r\nexport { SiteMap, Selector, AddSelector, DeleteItem, ClearSiteMap };\r\n","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\singleList.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectors.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\urlInput.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectorControls.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\initialSiteMap.js",["47","48"],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\dropDownMenu.jsx",["49"],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\multipleCheckbox.jsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":81,"column":18,"nodeType":"56","messageId":"57","endLine":81,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":1,"column":19,"nodeType":"60","messageId":"61","endLine":1,"endColumn":30},{"ruleId":"58","severity":1,"message":"62","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":16},{"ruleId":"58","severity":1,"message":"63","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'AddSelector' is defined but never used.","Identifier","unusedVar","'nanoid' is defined but never used.","'Fragment' is defined but never used.","no-global-assign","no-unsafe-negation"]