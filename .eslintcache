[{"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js":"1","E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx":"2","E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js":"3","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\singleList.jsx":"4","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectors.jsx":"5","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\urlInput.jsx":"6","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectorControls.jsx":"7","E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\initialSiteMap.js":"8"},{"size":157,"mtime":1609446492039,"results":"9","hashOfConfig":"10"},{"size":3107,"mtime":1611344140228,"results":"11","hashOfConfig":"10"},{"size":4478,"mtime":1611338562843,"results":"12","hashOfConfig":"10"},{"size":3624,"mtime":1611343888499,"results":"13","hashOfConfig":"10"},{"size":1988,"mtime":1611343717995,"results":"14","hashOfConfig":"10"},{"size":1171,"mtime":1611257793106,"results":"15","hashOfConfig":"10"},{"size":907,"mtime":1611257793103,"results":"16","hashOfConfig":"10"},{"size":246,"mtime":1610803607742,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1l2oosp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js",[],["37","38"],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js",["39"],"import { nanoid } from \"nanoid\";\r\n\r\nclass SiteMap {\r\n  constructor(id = nanoid(), name = \"\") {\r\n    this.id = id;\r\n    this.url = \"\";\r\n    this.componentClass = \"sitemap\";\r\n    this.name = name;\r\n    this.parentOf = [];\r\n  }\r\n\r\n  updateSitemap(input, property) {\r\n    let updatedSiteMap = this;\r\n    updatedSiteMap[property] = input;\r\n    this.SiteMap = updatedSiteMap;\r\n  }\r\n}\r\n\r\nclass Selector {\r\n  constructor(parentID, id = nanoid()) {\r\n    this.id = id;\r\n    this.value = \"\";\r\n    this.multiple = \"\";\r\n    this.componentClass = \"selector\";\r\n    this.type = \"\";\r\n    this.memberOfSiteMap = \"\";\r\n    this.childOf = [parentID];\r\n    this.parentOf = [];\r\n  }\r\n  updateSelector(input, property) {\r\n    let updatedSelector = this;\r\n    updatedSelector[property] = input;\r\n    this.Selector = updatedSelector;\r\n  }\r\n}\r\n\r\n//------------------------\r\n//------------------------\r\n\r\nfunction AddSelector(state, parentID, index, childID = nanoid()) {\r\n  if (state.find(item => item.id === childID)) {\r\n    return console.log(\"Error: a child with this id already exists!\");\r\n  }\r\n  let parent = state.filter(x => x.id === parentID)[0];\r\n  if (!parent) {\r\n    return console.log(\"Error: Parent does not exist!\");\r\n  }\r\n\r\n  let newSelector = new Selector(parentID, childID);\r\n  //if subIndex was undefined, assume that selector will be pushed to the\r\n  //childOf list of the parent element.\r\n  if (index === undefined) {\r\n    index = parent.parentOf.length ? parent.parentOf.length - 1 : 0;\r\n  }\r\n  //Set position of child in parentOf.\r\n  if (index === parent.parentOf.length - 1 || parent.parentOf.length === 0) {\r\n    parent.parentOf.push(childID);\r\n  } else {\r\n    let newOrdering = [\r\n      ...parent.parentOf.slice(0, index + 1),\r\n      childID,\r\n      ...parent.parentOf.slice(index + 1),\r\n    ];\r\n    parent.parentOf = newOrdering;\r\n  }\r\n\r\n  //Determine the siteMap id of which the selector is a member by tracing the parents\r\n  //until an item with the componentClass === \"sitemap\" is found. This method presumers\r\n  //that only one parent of a child can exist, even though the array type of the cildOf\r\n  //property indicates the possibility of future implementation of shared parents.\r\n  const findSiteMap = parent => {\r\n    parent.componentClass === \"sitemap\"\r\n      ? (newSelector.memberOfSiteMap = parent.id)\r\n      : findSiteMap(state.filter(item => item.id === parent.childOf[0])[0]);\r\n  };\r\n  findSiteMap(parent);\r\n\r\n  //Now, push the new selector to the state.\r\n  state.push(newSelector);\r\n  //If new selector is added, also update the parent.\r\n  state.map(item => {\r\n    if (item.id === parentID) {\r\n      return (item = parent);\r\n    }\r\n  });\r\n}\r\n\r\n//Delete a selector, remove reference in parent, and remove  its descend\r\nfunction DeleteItem(state, id) {\r\n  let newState = [];\r\n  let count = 1;\r\n  //------------------------\r\n  //Recursively remove children of a deleted selector.\r\n  const RecursiveDelete = (arr, id) => {\r\n    const target = arr.filter(item => item.id === id);\r\n\r\n    //Filter out the selector\r\n    newState = arr.filter(item => item.id !== id);\r\n\r\n    //Find parent and remove reference on first iteration (in subsequent\r\n    //iterations the parent is already removed at this point).\r\n    if (count === 1) {\r\n      let parent = arr.filter(item => item.parentOf.includes(id));\r\n      if (parent.length) {\r\n        parent = parent[0];\r\n        let parentIndex = arr.findIndex(item => item.parentOf.includes(id));\r\n        parent = parent.parentOf.filter(item => item !== id);\r\n        newState[parentIndex].parentOf = parent;\r\n      }\r\n    }\r\n    count++;\r\n\r\n    //Extract child id's and run the Remove script for each of them.\r\n    const children = target.map(item => item.parentOf).flat();\r\n    if (children.length) {\r\n      children.forEach(element => RecursiveDelete(newState, element));\r\n    }\r\n    return newState;\r\n  };\r\n  //------------------------\r\n  return (state = RecursiveDelete(state, id));\r\n}\r\n\r\nfunction ClearSiteMap(arr, siteMapID) {\r\n  //Filter out all the selectors, whose memberOfSiteMap property equals siteMapID.\r\n  //Additionally, remove child entries in the siteMap node. This  function needs to be // invoked as an assignment operation (arr = ClearSiteMap(array, siteMapID)) .\r\n  let newArray = arr.filter(item => item.memberOfSiteMap !== siteMapID);\r\n  newArray[newArray.findIndex(item => item.id === siteMapID)].parentOf = [];\r\n  return newArray;\r\n}\r\n\r\nexport { SiteMap, Selector, AddSelector, DeleteItem, ClearSiteMap };\r\n","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\singleList.jsx",["40"],"import React, { Fragment } from \"react\";\r\nimport SiteMapURL from \"./urlInput.jsx\";\r\nimport Selector from \"./selectors.jsx\";\r\n\r\nconst SingleSrapeList = props => {\r\n  const {\r\n    onSiteInputChange,\r\n    onSiteDelete,\r\n    onSelectorChange,\r\n    selectorProperty,\r\n    checkedStatus,\r\n    onAddSelector,\r\n    onAddChild,\r\n    onDeleteSelector,\r\n    onClearSiteMap,\r\n    stateArray,\r\n  } = props;\r\n  const siteMaps = stateArray.filter(item => item.componentClass === \"sitemap\");\r\n  const selectors = stateArray.filter(item => item.componentClass === \"selector\");\r\n\r\n  function RecursiveRender(selectors, parent, siteMaps) {\r\n    const childIDs = parent.parentOf;\r\n    const children = childIDs\r\n      .map(item => selectors.filter(element => element.id === item))\r\n      .flat();\r\n    if (children) {\r\n      return (\r\n        <ul\r\n          key={parent.id}\r\n          id={parent.id}\r\n          className={parent.componentClass === \"sitemap\" ? \"singleList\" : \"\"}>\r\n          {parent.componentClass === \"sitemap\" ? (\r\n            <SiteMapURL\r\n              key={`url--${parent.id}`}\r\n              urlValue={parent.value}\r\n              siteName={parent.name}\r\n              urlProp=\"url\"\r\n              nameProp=\"name\"\r\n              onSiteInputChange={(input, property) =>\r\n                onSiteInputChange(parent.id, input.target.value, property)\r\n              }\r\n              onSiteDelete={() => onSiteDelete(parent.id)}\r\n              siteNum={siteMaps.length}\r\n            />\r\n          ) : null}\r\n\r\n          {children.map(selector => {\r\n            return (\r\n              <Fragment>\r\n                <Selector\r\n                  key={selector.id}\r\n                  selectorID={selector.id}\r\n                  index={parent.parentOf.findIndex(element => element === selector.id)}\r\n                  namePrePend={\r\n                    selector.childOf[0] === selector.memberOfSiteMap\r\n                      ? \"Selector\"\r\n                      : \"Subsel.\"\r\n                  }\r\n                  siblings={parent.parentOf.length}\r\n                  children={selector.parentOf.length}\r\n                  parentType={parent.componentClass}\r\n                  position={parent.parentOf.findIndex(item => item === selector.id)}\r\n                  selectorValue={selectorProperty(selector.id, \"value\")}\r\n                  onSelectorChange={input =>\r\n                    onSelectorChange(selector.id, input.target.value, \"value\")\r\n                  }\r\n                  toggleMultiple={input =>\r\n                    onSelectorChange(selector.id, input.target.checked, \"multiple\")\r\n                  }\r\n                  checkedStatus={selectorProperty(selector.id, \"multiple\")}\r\n                  onAddSelector={() =>\r\n                    onAddSelector(\r\n                      parent.id,\r\n                      parent.parentOf.findIndex(element => element === selector.id)\r\n                    )\r\n                  }\r\n                  onAddChild={() => onAddChild(selector.id)}\r\n                  onDeleteSelector={() => onDeleteSelector(selector.id)}\r\n                  onSiteClear={() => onClearSiteMap(parent)}\r\n                />\r\n                {selector.parentOf.length ? (\r\n                  <ul key={`${selector.id}-children`}>\r\n                    {RecursiveRender(selectors, selector)}\r\n                  </ul>\r\n                ) : null}\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {siteMaps.map(singleList => RecursiveRender(selectors, singleList, siteMaps))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleSrapeList;\r\n","E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectors.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\urlInput.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\components\\selectorControls.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\initialSiteMap.js",["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":81,"column":18,"nodeType":"49","messageId":"50","endLine":81,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":11,"column":5,"nodeType":"53","messageId":"54","endLine":11,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":1,"column":19,"nodeType":"53","messageId":"54","endLine":1,"endColumn":30},{"ruleId":"51","severity":1,"message":"56","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'checkedStatus' is assigned a value but never used.","Identifier","unusedVar","'AddSelector' is defined but never used.","'nanoid' is defined but never used.","no-global-assign","no-unsafe-negation"]