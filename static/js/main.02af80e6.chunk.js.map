{"version":3,"sources":["components/urlInput.jsx","components/selectorControls.jsx","components/dropDownMenu.jsx","components/multipleCheckbox.jsx","components/selectors.jsx","components/singleList.jsx","classes/ScrapeList.js","components/header.jsx","App.jsx","index.js"],"names":["SiteMapURL","props","urlValue","siteName","onSiteInputChange","urlProp","nameProp","siteNum","onSiteDelete","className","type","placeholder","value","onChange","input","title","onClick","SelectorControls","AddChild","AddSelector","Delete","siblings","parentType","TypeDropDown","selectorID","onTypeChange","htmlFor","name","id","hidden","MultipleCheck","checkedStatus","toggleMultiple","checked","Selector","onDeleteSelector","onSiteClear","onAddSelector","onAddChild","onSelectorChange","index","selectorValue","namePrePend","children","position","SingleSrapeList","selectorProperty","onClearSiteMap","stateArray","siteMaps","filter","item","componentClass","selectors","RecursiveRender","parent","parentOf","map","element","flat","property","target","length","selector","findIndex","childOf","memberOfSiteMap","singleList","SiteMap","nanoid","this","url","parentID","multiple","addSelector","state","childID","find","console","log","x","newSelector","undefined","push","newOrdering","slice","findSiteMap","deleteItem","newState","count","RecursiveDelete","arr","includes","parentIndex","forEach","Header","initialArray","App","getProperty","query","targetID","setState","addSiteMap","newListID","onDeleteItem","clearSiteMap","handleSiteUpdate","toggleMultipleCheck","handleMultipleCheckToggle","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02af80e6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BiTrash as DeleteList } from \"react-icons/bi\";\r\n\r\nconst SiteMapURL = props => {\r\n  const {\r\n    urlValue,\r\n    siteName,\r\n    onSiteInputChange,\r\n    urlProp,\r\n    nameProp,\r\n    siteNum,\r\n    onSiteDelete,\r\n  } = props;\r\n  return (\r\n    <div className=\"list wrapper\">\r\n      <div className=\"list-name label\">\r\n        <label>List name: </label>\r\n      </div>\r\n      <div className=\"list-name input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter a name\"\r\n          value={siteName}\r\n          onChange={input => onSiteInputChange(input, nameProp)}\r\n        />\r\n      </div>\r\n      <div className=\"list-URL label\">\r\n        <label>URL: </label>\r\n      </div>\r\n      <div className=\"list-URL input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter URL address\"\r\n          value={urlValue}\r\n          onChange={input => onSiteInputChange(input, urlProp)}\r\n        />\r\n      </div>\r\n      <div className=\"list-delete\">\r\n        {siteNum > 1 ? (\r\n          <DeleteList\r\n            className=\"deleteList button\"\r\n            title=\"Delete the current sitemap.\"\r\n            onClick={onSiteDelete}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiteMapURL;\r\n","import React from \"react\";\r\nimport { BsArrowReturnRight as AddChildIcon, BsPlusCircle as AddSelectorIcon, BsXSquare as DeleteIcon } from \"react-icons/bs\";\r\n\r\nconst SelectorControls = props => {\r\n  const { AddChild, AddSelector, Delete, siblings, parentType } = props;\r\n  return (\r\n    <div className=\"selector-list controls\">\r\n      <AddChildIcon\r\n        className=\"addChildButton button\"\r\n        onClick={AddChild}\r\n        title=\"Add a child selector.\"\r\n      />\r\n      <AddSelectorIcon\r\n        className=\"addSelectorButton button\"\r\n        title=\"Add a new selector for this list.\"\r\n        onClick={AddSelector}\r\n      />\r\n      {/*Add Delete button only if the number of line items is greater than one.*/}\r\n      {siblings > 1 || parentType !== \"sitemap\" ? (\r\n        <DeleteIcon\r\n          className=\"deleteSelectorButton button\"\r\n          title=\"Recursivelsy delete the current selector\"\r\n          onClick={Delete}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectorControls;\r\n","const TypeDropDown = ({ selectorID, onTypeChange }) => {\r\n  return (\r\n    <div className=\"selector-list type\">\r\n      <label htmlFor={`selector-${selectorID}`}>Type</label>\r\n      <select\r\n        onChange={input => onTypeChange(input)}\r\n        name=\"selector-type-select\"\r\n        id={`selector-${selectorID}`}>\r\n        <option value=\"\" hidden></option>\r\n        <option value=\"Link\">Link</option>\r\n        <option value=\"Text\">Text</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeDropDown;\r\n","import React from \"react\";\r\n\r\nconst MultipleCheck = ({ selectorID, checkedStatus, toggleMultiple }) => {\r\n  return (\r\n    <div className=\"selector-list multiple checkbox\">\r\n      <label htmlFor={`checkbox-${selectorID}`}>Multiple?</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={input => toggleMultiple(input)}\r\n        id={`checkbox-${selectorID}`}\r\n        checked={checkedStatus}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleCheck;\r\n","import React from \"react\";\r\nimport SelectorControls from \"./selectorControls.jsx\";\r\nimport TypeDropDown from \"./dropDownMenu.jsx\";\r\nimport { BiEraser as EraseSelectors} from \"react-icons/bi\";\r\nimport MultipleCheck from \"./multipleCheckbox.jsx\";\r\n\r\nconst Selector = props => {\r\n  const {\r\n    selectorID,\r\n    onDeleteSelector,\r\n    onSiteClear,\r\n    onAddSelector,\r\n    onAddChild,\r\n    onSelectorChange,\r\n    index,\r\n    selectorValue,\r\n    namePrePend,\r\n    siblings,\r\n    children,\r\n    parentType,\r\n    position,\r\n    toggleMultiple,\r\n    checkedStatus,\r\n    onTypeChange,\r\n  } = props;\r\n  return (\r\n    <li\r\n      className={`selector-list wrapper`}\r\n      key={`lineItem-${selectorID}`}\r\n      id={`lineItem-${selectorID}`}>\r\n      <div className=\"selector-list label\">\r\n        <label htmlFor={selectorID}>\r\n          {namePrePend} {index + 1}:{\" \"}\r\n        </label>\r\n      </div>\r\n      <div className=\"selector-list input\" id={selectorID}>\r\n        <input\r\n          type=\"text\"\r\n          value={selectorValue}\r\n          placeholder=\"Enter selector\"\r\n          onChange={input => onSelectorChange(input)}\r\n          id={index + 1}></input>\r\n      </div>\r\n      <TypeDropDown selectorID={selectorID} onTypeChange={input => onTypeChange(input)}/>\r\n      <MultipleCheck selectorID = {selectorID} toggleMultiple={input => toggleMultiple(input)}checked={checkedStatus}/>\r\n      <SelectorControls\r\n        AddChild={onAddChild}\r\n        AddSelector={onAddSelector}\r\n        Delete={onDeleteSelector}\r\n        /*onSiteClear={onSiteClear}*/\r\n        siblings={siblings}\r\n        parentType={parentType}\r\n        position={position}\r\n      />\r\n      {/* Add Clear SiteMap to first selector */}\r\n      {(siblings > 1 || children >= 1) && parentType === \"sitemap\" && position === 0 ? (\r\n        <EraseSelectors\r\n          className=\"clearSiteMapButton button\"\r\n          title=\"Clear all selectors.\"\r\n          onClick={onSiteClear}\r\n        />\r\n      ) : null}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","import React, { Fragment } from \"react\";\r\nimport SiteMapURL from \"./urlInput.jsx\";\r\nimport Selector from \"./selectors.jsx\";\r\n\r\nconst SingleSrapeList = props => {\r\n  const {\r\n    onSiteInputChange,\r\n    onSiteDelete,\r\n    onSelectorChange,\r\n    selectorProperty,\r\n    onAddSelector,\r\n    onAddChild,\r\n    onDeleteSelector,\r\n    onClearSiteMap,\r\n    stateArray,\r\n  } = props;\r\n  const siteMaps = stateArray.filter(item => item.componentClass === \"sitemap\");\r\n  const selectors = stateArray.filter(item => item.componentClass === \"selector\");\r\n\r\n  function RecursiveRender(selectors, parent, siteMaps) {\r\n    const childIDs = parent.parentOf;\r\n    const children = childIDs\r\n      .map(item => selectors.filter(element => element.id === item))\r\n      .flat();\r\n    if (children) {\r\n      return (\r\n        <ul\r\n          key={parent.id}\r\n          id={parent.id}\r\n          className={parent.componentClass === \"sitemap\" ? \"singleList\" : \"\"}>\r\n          {parent.componentClass === \"sitemap\" ? (\r\n            <SiteMapURL\r\n              key={`url--${parent.id}`}\r\n              urlValue={parent.value}\r\n              siteName={parent.name}\r\n              urlProp=\"url\"\r\n              nameProp=\"name\"\r\n              onSiteInputChange={(input, property) =>\r\n                onSiteInputChange(parent.id, input.target.value, property)\r\n              }\r\n              onSiteDelete={() => onSiteDelete(parent.id)}\r\n              siteNum={siteMaps.length}\r\n            />\r\n          ) : null}\r\n\r\n          {children.map(selector => {\r\n            return (\r\n              <Fragment>\r\n                <Selector\r\n                  key={selector.id}\r\n                  selectorID={selector.id}\r\n                  index={parent.parentOf.findIndex(element => element === selector.id)}\r\n                  namePrePend={\r\n                    selector.childOf[0] === selector.memberOfSiteMap\r\n                      ? \"Selector\"\r\n                      : \"Subsel.\"\r\n                  }\r\n                  siblings={parent.parentOf.length}\r\n                  children={selector.parentOf.length}\r\n                  parentType={parent.componentClass}\r\n                  position={parent.parentOf.findIndex(item => item === selector.id)}\r\n                  selectorValue={selectorProperty(selector.id, \"value\")}\r\n                  onSelectorChange={input =>\r\n                    onSelectorChange(selector.id, input.target.value, \"value\")\r\n                  }\r\n                  toggleMultiple={input =>\r\n                    onSelectorChange(selector.id, input.target.checked, \"multiple\")\r\n                  }\r\n                  checkedStatus={selectorProperty(selector.id, \"multiple\")}\r\n                  onTypeChange={input => onSelectorChange(selector.id, input.target.value, \"type\")}\r\n                  onAddSelector={() =>\r\n                    onAddSelector(\r\n                      parent.id,\r\n                      parent.parentOf.findIndex(element => element === selector.id)\r\n                    )\r\n                  }\r\n                  onAddChild={() => onAddChild(selector.id)}\r\n                  onDeleteSelector={() => onDeleteSelector(selector.id)}\r\n                  onSiteClear={() => onClearSiteMap(parent)}\r\n                />\r\n                {selector.parentOf.length ? (\r\n                  <ul key={`${selector.id}-children`}>\r\n                    {RecursiveRender(selectors, selector)}\r\n                  </ul>\r\n                ) : null}\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {siteMaps.map(singleList => RecursiveRender(selectors, singleList, siteMaps))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleSrapeList;\r\n","import { nanoid } from \"nanoid\";\r\n\r\nclass SiteMap {\r\n  constructor(id = nanoid(), name = \"\") {\r\n    this.id = id;\r\n    this.url = \"\";\r\n    this.componentClass = \"sitemap\";\r\n    this.name = name;\r\n    this.parentOf = [];\r\n  }\r\n\r\n  updateSitemap(input, property) {\r\n    this[property] = input;\r\n  }\r\n}\r\n\r\nclass Selector {\r\n  constructor(parentID, id = nanoid()) {\r\n    this.id = id;\r\n    this.value = \"\";\r\n    this.multiple = \"\";\r\n    this.componentClass = \"selector\";\r\n    this.type = \"\";\r\n    this.memberOfSiteMap = \"\";\r\n    this.childOf = [parentID];\r\n    this.parentOf = [];\r\n  }\r\n  updateSelector(input, property) {\r\n    let updatedSelector = this;\r\n    updatedSelector[property] = input;\r\n    this.Selector = updatedSelector;\r\n  }\r\n}\r\n\r\n//------------------------\r\n//------------------------\r\n\r\nfunction addSelector(state, parentID, index, childID = nanoid()) {\r\n  if (state.find(item => item.id === childID)) {\r\n    return console.log(\"Error: a child with this id already exists!\");\r\n  }\r\n  let parent = state.filter(x => x.id === parentID)[0];\r\n  if (!parent) {\r\n    return console.log(\"Error: Parent does not exist!\");\r\n  }\r\n\r\n  let newSelector = new Selector(parentID, childID);\r\n  //if element index was undefined, assume that selector should be pushed to the\r\n  //childOf list of the parent element.\r\n  if (index === undefined) {\r\n    index = parent.parentOf.length ? parent.parentOf.length - 1 : 0;\r\n  }\r\n  //Set position of child in parentOf.\r\n  if (index === parent.parentOf.length - 1 || parent.parentOf.length === 0) {\r\n    parent.parentOf.push(childID);\r\n  } else {\r\n    let newOrdering = [\r\n      ...parent.parentOf.slice(0, index + 1),\r\n      childID,\r\n      ...parent.parentOf.slice(index + 1),\r\n    ];\r\n    parent.parentOf = newOrdering;\r\n  }\r\n\r\n  //Determine the siteMap id of which the selector is a member by tracing the parents\r\n  //until an item with the componentClass === \"sitemap\" is found. This method presumers\r\n  //that only one parent of a child can exist, even though the array type of the cildOf\r\n  //property indicates the possibility of future implementation of shared parents.\r\n  const findSiteMap = parent => {\r\n    parent.componentClass === \"sitemap\"\r\n      ? (newSelector.memberOfSiteMap = parent.id)\r\n      : findSiteMap(state.filter(item => item.id === parent.childOf[0])[0]);\r\n  };\r\n  findSiteMap(parent);\r\n\r\n  //Now, push the new selector to the state.\r\n  state.push(newSelector);\r\n  //If new selector is added, also update the parent.\r\n  state.map(item => {\r\n    if (item.id === parentID) {\r\n      return (item = parent);\r\n    }\r\n  });\r\n}\r\n\r\n//Delete a selector, remove reference in parent, and remove  its descend\r\nfunction deleteItem(state, id) {\r\n  let newState = [];\r\n  let count = 1;\r\n  //------------------------\r\n  //Recursively remove children of a deleted selector.\r\n  const RecursiveDelete = (arr, id) => {\r\n    const target = arr.filter(item => item.id === id);\r\n\r\n    //Filter out the selector\r\n    newState = arr.filter(item => item.id !== id);\r\n\r\n    //Find parent and remove reference on first iteration (in subsequent\r\n    //iterations the parent is already removed at this point).\r\n    if (count === 1) {\r\n      let parent = arr.filter(item => item.parentOf.includes(id));\r\n      if (parent.length) {\r\n        parent = parent[0];\r\n        let parentIndex = arr.findIndex(item => item.parentOf.includes(id));\r\n        parent = parent.parentOf.filter(item => item !== id);\r\n        newState[parentIndex].parentOf = parent;\r\n      }\r\n    }\r\n    count++;\r\n\r\n    //Extract child id's and run the Remove script for each of them.\r\n    const children = target.map(item => item.parentOf).flat();\r\n    if (children.length) {\r\n      children.forEach(element => RecursiveDelete(newState, element));\r\n    }\r\n    return newState;\r\n  };\r\n  //------------------------\r\n  return (state = RecursiveDelete(state, id));\r\n}\r\n\r\nfunction clearSiteMap(arr, siteMapID) {\r\n  //Filter out all the selectors, whose memberOfSiteMap property equals siteMapID.\r\n  //Additionally, remove child entries in the siteMap node. This  function needs to be invoked as an assignment operation.\r\n  let newArray = arr.filter(item => item.memberOfSiteMap !== siteMapID);\r\n  newArray[newArray.findIndex(item => item.id === siteMapID)].parentOf = [];\r\n  return newArray;\r\n}\r\n\r\nexport { SiteMap, Selector, addSelector, deleteItem, clearSiteMap };\r\n","const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"title-bar\">\r\n        <h1 id=\"main-title\" className=\"title\">\r\n          CDS -\r\n        </h1>\r\n        <div className=\"main-subtitle\">\r\n          <h2 className=\"title inline-subtitle\">Compact Desktop Scraper</h2>\r\n          <p>A work in progress</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport SingleSrapeList from \"./components/singleList\";\r\nimport { SiteMap, addSelector, deleteItem } from \"./classes/ScrapeList.js\";\r\nimport { BiListPlus as AddNewList } from \"react-icons/bi\";\r\nimport \"./style.css\";\r\nimport Header from \"./components/header\";\r\n\r\nlet initialArray = [];\r\ninitialArray.push(new SiteMap(\"InitialMap\", \"First Map\"));\r\naddSelector(initialArray, \"InitialMap\", 0, \"First Selector\");\r\n\r\nclass App extends Component {\r\n  state = {\r\n    siteMaps: initialArray,\r\n  };\r\n\r\n  getProperty = (id, property) => {\r\n    let query = this.state.siteMaps;\r\n    let index = query.findIndex(item => item.id === id);\r\n    let value = query[index][property];\r\n    return value;\r\n  };\r\n\r\n  onAddSelector = (targetID, index) => {\r\n    let newState = this.state.siteMaps;\r\n    addSelector(newState, targetID, index);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  handleSiteUpdate(id, input, property) {\r\n    let newState = this.state.siteMaps;\r\n    let index = newState.findIndex(item => item.id === id);\r\n    newState[index][property] = input;\r\n    this.setState({ siteMaps: newState });\r\n  }\r\n\r\n  addSiteMap = () => {\r\n    let newState = this.state.siteMaps;\r\n    let newListID = nanoid();\r\n    newState.push(new SiteMap(newListID));\r\n    addSelector(newState, newListID);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  onDeleteItem = id => {\r\n    let newState = this.state.siteMaps;\r\n    newState = deleteItem(newState, id);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  clearSiteMap = parent => {\r\n    let newState = this.state.siteMaps;\r\n    const children = parent.parentOf;\r\n    for (let childID of children) {\r\n      newState = deleteItem(newState, childID);\r\n    }\r\n\r\n    addSelector(newState, parent.id);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  render() {\r\n    const siteMaps = this.state.siteMaps;\r\n    return (\r\n      <Fragment>\r\n      <Header />\r\n      <div className=\"list-container\">\r\n        <SingleSrapeList\r\n          stateArray={siteMaps}\r\n          onSiteInputChange={(id, input, property) =>\r\n            this.handleSiteUpdate(id, input, property)\r\n          }\r\n          onSiteDelete={id => this.onDeleteItem(id)}\r\n          onSelectorChange={(id, input, property) =>\r\n            this.handleSiteUpdate(id, input, property)\r\n          }\r\n          selectorProperty={(id, property) => this.getProperty(id, property)}\r\n          toggleMultipleCheck={(input)=> this.handleMultipleCheckToggle(input)}\r\n          onAddSelector={(id, index) => this.onAddSelector(id, index)}\r\n          onAddChild={id => this.onAddSelector(id)}\r\n          onDeleteSelector={id => this.onDeleteItem(id)}\r\n          onClearSiteMap={parent => this.clearSiteMap(parent)}\r\n        />\r\n        <AddNewList\r\n          className=\"addNewList button\"\r\n          title=\"Add another scraping list\"\r\n          onClick={() => this.addSiteMap()}\r\n        />\r\n      </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/* */\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.jsx\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}