[{"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js":"1","E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx":"2","E:\\Programiranje\\JS\\scraper-react-trial\\src\\selectors.jsx":"3","E:\\Programiranje\\JS\\scraper-react-trial\\src\\urlInput.jsx":"4","E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js":"5"},{"size":157,"mtime":1609446492039,"results":"6","hashOfConfig":"7"},{"size":3412,"mtime":1609686663221,"results":"8","hashOfConfig":"7"},{"size":1354,"mtime":1609681050074,"results":"9","hashOfConfig":"7"},{"size":1228,"mtime":1609596340926,"results":"10","hashOfConfig":"7"},{"size":3080,"mtime":1609685409824,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1l2oosp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"E:\\Programiranje\\JS\\scraper-react-trial\\src\\index.js",[],["24","25"],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\App.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\selectors.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\urlInput.jsx",[],"E:\\Programiranje\\JS\\scraper-react-trial\\src\\classes\\ScrapeList.js",["26"],"import { nanoid } from \"nanoid\";\r\n\r\nexport class Selector {\r\n  constructor(id = nanoid()) {\r\n    this.id = id;\r\n    this.value= \"\";\r\n    this.multiple= \"\";\r\n    this.componentClass = \"selector\"\r\n    this.type = \"\";\r\n    this.scrapeResult=[];\r\n    this.selectors = [];\r\n  }\r\n}\r\n\r\nclass SiteMap {\r\n  constructor(id= nanoid(), name=\"\") {  \r\n    this.id= id;\r\n    this.url= \"\";\r\n    this.componentClass=\"sitemap\";\r\n    this.name = name;\r\n    this.selectors= [new Selector()];\r\n  }\r\n\r\n  \r\n  \r\n  //Return nested selector by id\r\n  checkChildren(arr, id, Action) {\r\n    let isArray = Array.isArray(arr);\r\n    if (isArray) {\r\n      arr.map(item => {\r\n        if (item.id === id) {\r\n           return Action(item);\r\n          } else {\r\n            if (item.selectors.length) { this.checkChildren(item.selectors, id, Action)};\r\n          }\r\n        });\r\n      } else {\r\n        if (arr.id === id) {\r\n            return Action(arr);\r\n        } else {\r\n          if (arr.selectors.length) { this.checkChildren(arr.selectors, id, Action) };\r\n      }\r\n    }\r\n  }\r\n    \r\n  //Add a selector to the current SiteMap. \r\n  //HOW IT WORKS: You ADD A SIBLING selector by referencing the id of the PARENT (i.e. a sitemap or a parent selector id). You ADD A CHILD by referencing the id of the SELECTOR ITSELF.\r\n  addSelector(id, index=0) {\r\n    let state = this;\r\n\r\n    function SelectorAdd(result) {\r\n      if (index >= result.selectors.length - 1 || result.selectors.length === 0) {\r\n          return result.selectors.push(new Selector());\r\n      } else {\r\n        let newSelectors = [\r\n          ...result.selectors.slice(0, index + 1),\r\n          new Selector(),\r\n          ...result.selectors.slice(index + 1)\r\n        ];\r\n        return result.selectors = newSelectors;\r\n        }\r\n      }\r\n      this.checkChildren(state, id, SelectorAdd);\r\n      this.selectors = state.selectors;\r\n    }\r\n  \r\n\r\n  deleteSelector(id) {\r\n    let reducedSelectors = this.selectors.filter(item => item.id !== id)\r\n    this.selectors = reducedSelectors;\r\n  }\r\n\r\n  deleteSelectorsAll(id) {\r\n    let selectors = this.selectors;\r\n\r\n    function Delete (result) {\r\n      return result.selectors = [];\r\n    };\r\n\r\n    this.checkChildren(selectors, id, Delete);\r\n    this.selectors = selectors;\r\n  }\r\n\r\n  updateSelectorValue(id, input) {\r\n    let updatedSelector = this.selectors;\r\n    function ModifySelector(result) {\r\n      result.value = input;\r\n    }\r\n    this.checkChildren(updatedSelector, id, ModifySelector)\r\n    this.selectors = updatedSelector;\r\n  }\r\n\r\n  updateSitemap(input, property) {\r\n    let updatedSiteMap = this;\r\n    updatedSiteMap[property] = input;\r\n    this.SiteMap = updatedSiteMap;\r\n  }\r\n\r\n  //Add a child selector at a specified index. Disable, becuas ethe addSelector\r\n  //function already achieves that.\r\n/*\r\n  addChildSelector(id) {\r\n    let selectors = this.selectors;\r\n    \r\n    function AddChild (result) { \r\n      return result.selectors.push(new Selector());\r\n    };\r\n\r\n    this.checkChildren(selectors, id, AddChild);\r\n    this.selectors = selectors;\r\n  }\r\n*/\r\n  \r\n}\r\n\r\nexport default SiteMap;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":30,"column":20,"nodeType":"33","messageId":"34","endLine":30,"endColumn":22},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]