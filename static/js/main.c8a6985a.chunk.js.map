{"version":3,"sources":["components/urlInput.jsx","components/selectorControls.jsx","components/dropDownMenu.jsx","components/inputBox.jsx","components/multipleCheckbox.jsx","components/selectors.jsx","components/PassIndex.js","components/singleList.jsx","classes/ScrapeList.js","components/header.jsx","App.jsx","index.js"],"names":["SiteMapURL","props","urlValue","siteName","onSiteInputChange","urlProp","nameProp","siteNum","onSiteDelete","className","type","placeholder","value","onChange","input","title","onClick","SelectorControls","AddChild","AddSelector","Delete","siblings","parentType","TypeDropDown","selectorID","onTypeChange","selectedType","children","htmlFor","name","id","disabled","map","option","index","hidden","InputBox","selectorValue","subType","onSelectorChange","MultipleCheck","checkedStatus","target","checked","Selector","onDeleteSelector","onSiteClear","onAddSelector","onAddChild","parentIndex","selectorName","position","ExtractIndex","parent","selectors","siteMaps","filter","entry","parentOf","includes","length","findIndex","PassIndex","componentClass","indexArray","ancestorClass","ancestor","push","ancestorID","childOf","join","SingleSrapeList","selectorProperty","onClearSiteMap","stateArray","item","RecursiveRender","element","flat","url","property","selector","singleList","SiteMap","nanoid","this","parentID","multiple","memberOfSiteMap","addSelector","state","childID","linkTypes","find","stateSelector","console","error","newSelector","undefined","newOrdering","slice","findSiteMap","forEach","deleteItem","newState","count","RecursiveDelete","arr","Header","initialArray","App","getProperty","query","targetID","setState","addSiteMap","newListID","onDeleteItem","clearSiteMap","handleSiteUpdate","toggleMultipleCheck","handleMultipleCheckToggle","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8a6985a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { BiTrash as DeleteList } from \"react-icons/bi\";\r\n\r\nconst SiteMapURL = props => {\r\n  const {\r\n    urlValue,\r\n    siteName,\r\n    onSiteInputChange,\r\n    urlProp,\r\n    nameProp,\r\n    siteNum,\r\n    onSiteDelete,\r\n  } = props;\r\n  return (\r\n    <div className=\"list wrapper\">\r\n      <div className=\"list-name label\">\r\n        <label>List: </label>\r\n      </div>\r\n      <div className=\"list-name input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Sitemap name\"\r\n          value={siteName}\r\n          onChange={input => onSiteInputChange(input, nameProp)}\r\n        />\r\n      </div>\r\n      <div className=\"list-URL label\">\r\n        <label>URL: </label>\r\n      </div>\r\n      <div className=\"list-URL input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"URL address\"\r\n          value={urlValue}\r\n          onChange={input => onSiteInputChange(input, urlProp)}\r\n        />\r\n      </div>\r\n      <div className=\"list-delete\">\r\n        {siteNum > 1 ? (\r\n          <DeleteList\r\n            className=\"deleteList button\"\r\n            title=\"Delete the current sitemap.\"\r\n            onClick={onSiteDelete}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiteMapURL;\r\n","import React from \"react\";\r\nimport { BsArrowReturnRight as AddChildIcon, BsPlusCircle as AddSelectorIcon, BsXSquare as DeleteIcon } from \"react-icons/bs\";\r\n\r\nconst SelectorControls = props => {\r\n  const { AddChild, AddSelector, Delete, siblings, parentType } = props;\r\n  return (\r\n    <div className=\"selector-list controls\">\r\n      <AddChildIcon\r\n        className=\"addChildButton button\"\r\n        onClick={AddChild}\r\n        title=\"Add a child selector.\"\r\n      />\r\n      <AddSelectorIcon\r\n        className=\"addSelectorButton button\"\r\n        title=\"Add a new selector for this list.\"\r\n        onClick={AddSelector}\r\n      />\r\n      {/*Add Delete button only if the number of line items is greater than one.*/}\r\n      {siblings > 1 || parentType !== \"sitemap\" ? (\r\n        <DeleteIcon\r\n          className=\"deleteSelectorButton button\"\r\n          title=\"Recursively delete the current selector.\"\r\n          onClick={Delete}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectorControls;\r\n","const TypeDropDown = ({ selectorID, onTypeChange, selectedType, children }) => {\r\n  const selectOptions = [\"\", \"text\", \"click\", \"link\"];\r\n  return (\r\n    <div className=\"selector-list type\">\r\n      <label htmlFor={`selector-${selectorID}`}>Type</label>\r\n      <select\r\n        onChange={input => onTypeChange(input)}\r\n        name=\"selector-type-select\"\r\n        id={`selector-${selectorID}`}\r\n        value={selectedType}\r\n        disabled={children}>\r\n        {selectOptions.map((option, index) => (\r\n          <option key={`${selectorID}-${index}`} value={option} hidden={option === \"\"}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeDropDown;\r\n","const InputBox = props => {\r\n  const { selectorID, selectorValue, index, placeholder, subType, onSelectorChange } = props;\r\n  return (\r\n    <div className={`selector-list ${subType}`} id={`${selectorID}-${subType}`}>\r\n      <input\r\n        type=\"text\"\r\n        value={selectorValue}\r\n        placeholder={placeholder}\r\n        onChange={(input) => onSelectorChange(input, subType)}\r\n        id={`${subType}-${index + 1}`}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputBox;\r\n","import React from \"react\";\r\n\r\nconst MultipleCheck = ({ selectorID, checkedStatus, onSelectorChange }) => {\r\n  return (\r\n    <div className=\"selector-list multiple checkbox\">\r\n      <label htmlFor={`checkbox-${selectorID}`}>Multiple?</label>\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={input => {\r\n          input.target.checked\r\n            ? (input.target.value = true)\r\n            : (input.target.value = false);\r\n          onSelectorChange(input);\r\n        }}\r\n        id={`checkbox-${selectorID}`}\r\n        checked = { checkedStatus === \"true\" }></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleCheck;\r\n","import React from \"react\";\r\nimport SelectorControls from \"./selectorControls.jsx\";\r\nimport TypeDropDown from \"./dropDownMenu.jsx\";\r\nimport { BiEraser as EraseSelectors } from \"react-icons/bi\";\r\nimport InputBox from \"./inputBox.jsx\";\r\nimport MultipleCheck from \"./multipleCheckbox.jsx\";\r\n\r\nconst Selector = props => {\r\n  const {\r\n    selectorID,\r\n    onDeleteSelector,\r\n    onSiteClear,\r\n    onAddSelector,\r\n    onAddChild,\r\n    onSelectorChange,\r\n    parentIndex,\r\n    index,\r\n    selectorValue,\r\n    selectorName,\r\n    selectedType,\r\n    siblings,\r\n    children,\r\n    parentType,\r\n    position,\r\n    checkedStatus,\r\n  } = props;\r\n  return (\r\n    <li\r\n      className={`selector-list wrapper`}\r\n      key={`lineItem-${selectorID}`}\r\n      id={`lineItem-${selectorID}`}>\r\n      <div className=\"selector-list label\">\r\n        <label htmlFor={selectorID}>\r\n          Sel. {parentIndex ? `${parentIndex}.${index + 1}: ` : `${index + 1 }: `}\r\n        </label>\r\n      </div>\r\n      <InputBox\r\n        placeholder=\"Selector name\"\r\n        selectorID = {selectorID}\r\n        subType=\"name\"\r\n        index={index}\r\n        onSelectorChange={(input, type) => onSelectorChange(input, type)}\r\n        selectorValue={selectorName}\r\n      />\r\n      <InputBox\r\n      selectorID = {selectorID}\r\n        placeholder=\"Selector definition\"\r\n        subType=\"value\"\r\n        index={index}\r\n        onSelectorChange={input => onSelectorChange(input, \"value\")}\r\n        selectorValue={selectorValue}\r\n      />\r\n\r\n      <TypeDropDown\r\n        selectorID={selectorID}\r\n        onTypeChange={input => onSelectorChange(input, \"type\")}\r\n        selectedType = { selectedType }\r\n        children = { children }\r\n      />\r\n      <MultipleCheck\r\n        selectorID={selectorID}\r\n        onSelectorChange={input => onSelectorChange(input, \"multiple\")}\r\n        checkedStatus={checkedStatus}\r\n      />\r\n      <SelectorControls\r\n        AddChild={onAddChild}\r\n        AddSelector={onAddSelector}\r\n        Delete={onDeleteSelector}\r\n        /*onSiteClear={onSiteClear}*/\r\n        siblings={siblings}\r\n        parentType={parentType}\r\n        position={position}\r\n      />\r\n      {/* Add Clear SiteMap to first selector */}\r\n      {(siblings > 1 || children >= 1) && parentType === \"sitemap\" && position === 0 ? (\r\n        <EraseSelectors\r\n          className=\"clearSiteMapButton button\"\r\n          title=\"Clear all selectors.\"\r\n          onClick={onSiteClear}\r\n        />\r\n      ) : null}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","const PassIndex = (parent, selectors, siteMaps) => {\r\n  if (parent.componentClass === \"sitemap\") {\r\n    return;\r\n  }\r\n  let indexArray = [];\r\n  let ancestorClass = \"selector\";\r\n  let ancestor = parent;\r\n  while (ancestorClass !== \"sitemap\") {\r\n    indexArray.push(ExtractIndex(ancestor, selectors, siteMaps));\r\n    //console.log(\"Intermediate array indices: \", indexArray.reverse());\r\n    const ancestorID = ancestor.childOf[0];\r\n    siteMaps.filter(entry => entry.id === ancestorID).length === 0\r\n      ? (ancestor = selectors.filter(entry => entry.id === ancestorID)[0])\r\n      : (ancestorClass = \"sitemap\");\r\n  }\r\n\r\n  return indexArray.join(\".\");\r\n};\r\n\r\nconst ExtractIndex = (parent, selectors, siteMaps) => {\r\n  let targetArray = [];\r\n\r\n  siteMaps.filter(entry => entry.parentOf.includes(parent.id)).length > 0\r\n    ? (targetArray = siteMaps)\r\n    : (targetArray = selectors);\r\n\r\n  //console.log(\"Target array: \", targetArray);\r\n  const targetElement = targetArray.filter(entry => entry.parentOf.includes(parent.id));\r\n  return targetElement[0].parentOf.findIndex(children => children === parent.id) + 1;\r\n};\r\n\r\nexport default PassIndex;\r\n","import React, { Fragment } from \"react\";\r\nimport SiteMapURL from \"./urlInput.jsx\";\r\nimport Selector from \"./selectors.jsx\";\r\nimport PassIndex from \"./PassIndex.js\";\r\n\r\nconst SingleSrapeList = props => {\r\n  const {\r\n    onSiteInputChange,\r\n    onSiteDelete,\r\n    onSelectorChange,\r\n    selectorProperty,\r\n    onAddSelector,\r\n    onAddChild,\r\n    onDeleteSelector,\r\n    onClearSiteMap,\r\n    stateArray,\r\n  } = props;\r\n  const siteMaps = stateArray.filter(item => item.componentClass === \"sitemap\");\r\n  const selectors = stateArray.filter(item => item.componentClass === \"selector\");\r\n\r\n\r\n  function RecursiveRender(selectors, parent, siteMaps) {\r\n    const childIDs = parent.parentOf;\r\n    const children = childIDs\r\n      .map(item => selectors.filter(element => element.id === item))\r\n      .flat();\r\n    if (children) {\r\n      return (\r\n        <ul\r\n          key={parent.id}\r\n          id={parent.id}\r\n          className={parent.componentClass === \"sitemap\" ? \"singleList\" : \"\"}>\r\n          {parent.componentClass === \"sitemap\" ? (\r\n            <SiteMapURL\r\n              key={`url--${parent.id}`}\r\n              urlValue={parent.url}\r\n              siteName={parent.name}\r\n              urlProp=\"url\"\r\n              nameProp=\"name\"\r\n              onSiteInputChange={(input, property) =>\r\n                onSiteInputChange(parent.id, input.target.value, property)\r\n              }\r\n              onSiteDelete={() => onSiteDelete(parent.id)}\r\n              siteNum={siteMaps.length}\r\n            />\r\n          ) : null}\r\n\r\n          {children.map(selector => {\r\n            return (\r\n              <Fragment key={`Fragment-${selector.id}`}>\r\n                <Selector\r\n                  key={selector.id}\r\n                  selectorID={selector.id}\r\n                  parentIndex= {parent.componentClass !== \"sitemap\" ? PassIndex(parent, selectors, siteMaps) : null}\r\n                  index={parent.parentOf.findIndex(element => element === selector.id)}\r\n                  siblings={parent.parentOf.length}\r\n                  children={selector.parentOf.length}\r\n                  parentType={parent.componentClass}\r\n                  position={parent.parentOf.findIndex(item => item === selector.id)}\r\n                  selectorName={selectorProperty(selector.id, \"name\")}\r\n                  selectorValue={selectorProperty(selector.id, \"value\")}\r\n                  selectedType = { selectorProperty(selector.id, \"type\") }\r\n                  onSelectorChange={(input, type) =>\r\n                    onSelectorChange(selector.id, input.target.value, type)\r\n                  }\r\n                  checkedStatus={selectorProperty(selector.id, \"multiple\")}\r\n                  onAddSelector={() =>\r\n                    onAddSelector(\r\n                      parent.id,\r\n                      parent.parentOf.findIndex(element => element === selector.id)\r\n                    )\r\n                  }\r\n                  onAddChild={() => onAddChild(selector.id)}\r\n                  onDeleteSelector={() => onDeleteSelector(selector.id)}\r\n                  onSiteClear={() => onClearSiteMap(parent)}\r\n                />\r\n                {selector.parentOf.length ? (\r\n                  <ul key={`${selector.id}-children`}>\r\n                    {RecursiveRender(selectors, selector, siteMaps)}\r\n                  </ul>\r\n                ) : null}\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {siteMaps.map(singleList => RecursiveRender(selectors, singleList, siteMaps))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleSrapeList;\r\n","import { nanoid } from \"nanoid\";\r\n\r\nclass SiteMap {\r\n  constructor(id = nanoid(), name = \"\") {\r\n    this.id = id;\r\n    this.url = \"\";\r\n    this.componentClass = \"sitemap\";\r\n    this.name = name;\r\n    this.parentOf = [];\r\n  }\r\n\r\n  updateSitemap(input, property) {\r\n    this[property] = input;\r\n  }\r\n}\r\n\r\nclass Selector {\r\n  constructor(parentID, id = nanoid(), type = \"text\") {\r\n    this.id = id;\r\n    this.name = \"\";\r\n    this.value = \"\";\r\n    this.multiple = \"\";\r\n    this.componentClass = \"selector\";\r\n    this.type = type;\r\n    this.memberOfSiteMap = \"\";\r\n    this.childOf = [parentID];\r\n    this.parentOf = [];\r\n  }\r\n  updateSelector(input, property) {\r\n    this[property] = input;\r\n  }\r\n}\r\n\r\n//METHODS\r\n\r\nfunction addSelector(state, parentID, index, childID = nanoid()) {\r\n  const linkTypes = [\"link\", \"click\"];\r\n  if (state.find(stateSelector => stateSelector.id === childID)) {\r\n    return console.error(\"Error: a child with this id already exists!\");\r\n  }\r\n  let parent = state.filter(stateSelector => stateSelector.id === parentID);\r\n  if (!parent.length) {\r\n    return console.error(\"Error: Parent does not exist!\");\r\n  }\r\n  parent = parent[0];\r\n\r\n  //If a selector has children, change it to a link type if it does not already\r\n  //include one of the linkTypes.\r\n  if (!linkTypes.includes(parent.type)) { parent.type = linkTypes[0] };\r\n\r\n  let newSelector = new Selector(parentID, childID);\r\n  //if element index was undefined, push the selector to the childOf list of the parent.\r\n  if (index === undefined) {\r\n    index = parent.parentOf.length ? parent.parentOf.length - 1 : 0;\r\n  }\r\n  //Set position of child in parentOf.\r\n  if (index === parent.parentOf.length - 1 || parent.parentOf.length === 0) {\r\n    parent.parentOf.push(childID);\r\n  } else {\r\n    let newOrdering = [\r\n      ...parent.parentOf.slice(0, index + 1),\r\n      childID,\r\n      ...parent.parentOf.slice(index + 1),\r\n    ];\r\n    parent.parentOf = newOrdering;\r\n  }\r\n\r\n  //Determine the siteMap id of which the selector is a member by tracing the parents.\r\n  //Only one parent per child allowed.\r\n  const findSiteMap = parent => {\r\n    parent.componentClass === \"sitemap\"\r\n      ? (newSelector.memberOfSiteMap = parent.id)\r\n      : findSiteMap(state.filter(item => item.id === parent.childOf[0])[0]);\r\n  };\r\n  findSiteMap(parent);\r\n\r\n  //Now, push the new selector to the state.\r\n  state.push(newSelector);\r\n  //If new selector is added, also update the parent.\r\n  state.forEach(item => {\r\n    if (item.id === parentID) {\r\n      return (item = parent);\r\n    }\r\n  });\r\n}\r\n\r\n//Delete a selector, remove reference in parent, and remove  its descend\r\nfunction deleteItem(state, id) {\r\n  let newState = [];\r\n  let count = 1;\r\n  \r\n  //Recursively remove children of a deleted selector.\r\n  const RecursiveDelete = (arr, id) => {\r\n    const target = arr.filter(item => item.id === id);\r\n    //Filter out the selector\r\n    newState = arr.filter(item => item.id !== id);\r\n    //Find parent and remove reference on first iteration.\r\n    if (count === 1) {\r\n      let parent = arr.filter(item => item.parentOf.includes(id));\r\n      if (parent.length) {\r\n        parent = parent[0];\r\n        let parentIndex = arr.findIndex(item => item.parentOf.includes(id));\r\n        parent = parent.parentOf.filter(item => item !== id);\r\n        newState[parentIndex].parentOf = parent;\r\n      }\r\n    }\r\n    count++;\r\n\r\n    //Extract child id's and run the Remove script for each of them.\r\n    const children = target.map(item => item.parentOf).flat();\r\n    if (children.length) {\r\n      children.forEach(element => RecursiveDelete(newState, element));\r\n    }\r\n    return newState;\r\n  };\r\n\r\n  return state = RecursiveDelete(state, id);\r\n}\r\n\r\nfunction clearSiteMap(arr, siteMapID) {\r\n  //Filter out all the selectors, whose memberOfSiteMap property equals siteMapID.\r\n  //Also remove child entries in the siteMap node.\r\n  let newArray = arr.filter(item => item.memberOfSiteMap !== siteMapID);\r\n  newArray[newArray.findIndex(item => item.id === siteMapID)].parentOf = [];\r\n  return newArray;\r\n}\r\n\r\nexport { SiteMap, Selector, addSelector, deleteItem, clearSiteMap };","const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"title-bar\">\r\n        <h1 id=\"main-title\" className=\"title\">\r\n          CDS -\r\n        </h1>\r\n        <div className=\"main-subtitle\">\r\n          <h2 className=\"title inline-subtitle\">Compact Desktop Scraper</h2>\r\n          <p>A work in progress</p>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport SingleSrapeList from \"./components/singleList\";\r\nimport { SiteMap, addSelector, deleteItem } from \"./classes/ScrapeList.js\";\r\nimport { BiListPlus as AddNewList } from \"react-icons/bi\";\r\nimport \"./style.css\";\r\nimport Header from \"./components/header\";\r\n\r\nlet initialArray = [];\r\ninitialArray.push(new SiteMap(\"InitialMap\", \"First Map\"));\r\naddSelector(initialArray, \"InitialMap\", 0, \"First Selector\");\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    siteMaps: initialArray,\r\n  };\r\n\r\n  getProperty = (id, property) => {\r\n    let query = this.state.siteMaps;\r\n    let index = query.findIndex(item => item.id === id);\r\n    let value = query[index][property];\r\n    return value;\r\n  };\r\n\r\n  onAddSelector = (targetID, index) => {\r\n    let newState = this.state.siteMaps;\r\n    addSelector(newState, targetID, index);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  handleSiteUpdate(id, input, property) {\r\n    let newState = this.state.siteMaps;\r\n    let index = newState.findIndex(item => item.id === id);\r\n    newState[index][property] = input;\r\n    this.setState({ siteMaps: newState });\r\n  }\r\n\r\n  addSiteMap = () => {\r\n    let newState = this.state.siteMaps;\r\n    let newListID = nanoid();\r\n    newState.push(new SiteMap(newListID));\r\n    addSelector(newState, newListID);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  onDeleteItem = id => {\r\n    let newState = this.state.siteMaps;\r\n    newState = deleteItem(newState, id);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  clearSiteMap = parent => {\r\n    let newState = this.state.siteMaps;\r\n    const children = parent.parentOf;\r\n    for (let childID of children) {\r\n      newState = deleteItem(newState, childID);\r\n    }\r\n\r\n    addSelector(newState, parent.id);\r\n    this.setState({ siteMaps: newState });\r\n  };\r\n\r\n  render() {\r\n    const siteMaps = this.state.siteMaps;\r\n    return (\r\n      <Fragment>\r\n      <Header />\r\n      <div className=\"list-container\">\r\n        <SingleSrapeList\r\n          stateArray={siteMaps}\r\n          onSiteInputChange={(id, input, property) =>\r\n            this.handleSiteUpdate(id, input, property)\r\n          }\r\n          onSiteDelete={id => this.onDeleteItem(id)}\r\n          onSelectorChange={(id, input, property) =>\r\n            this.handleSiteUpdate(id, input, property)\r\n          }\r\n          selectorProperty={(id, property) => this.getProperty(id, property)}\r\n          toggleMultipleCheck={(input)=> this.handleMultipleCheckToggle(input)}\r\n          onAddSelector={(id, index) => this.onAddSelector(id, index)}\r\n          onAddChild={id => this.onAddSelector(id)}\r\n          onDeleteSelector={id => this.onDeleteItem(id)}\r\n          onClearSiteMap={parent => this.clearSiteMap(parent)}\r\n        />\r\n        <AddNewList\r\n          className=\"addNewList button\"\r\n          title=\"Add another scraping list\"\r\n          onClick={() => this.addSiteMap()}\r\n        />\r\n      </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/* */\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.jsx\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}